!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t,e,i){const n=(s=e.a,{x:(r=e.b).x-s.x,y:r.y-s.y});var s,r;return{x:t.x+n.x*i,y:t.y+n.y*i}}function s(t,e){return{x:(t.x+e.x)/2,y:(t.y+e.y)/2}}function r(t,e){const i=Math.cos(e),n=Math.sin(e);return t.map(({x:t,y:e})=>({x:t*i-e*n,y:t*n+e*i}))}i.r(e);const o=100;class a{constructor(t){this.svg=t,this.triangle=function(){const t=.5*Math.sqrt(3);return[{x:0,y:-2*t/3},{x:.5,y:t/3},{x:-.5,y:t/3}]}(),this.svgPoints=[c("1.2"),c("1.2"),c("1.2")],this.svgSides=[g(),g(),g()],this.svgHeights=[g({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),g({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),g({stroke:"grey",strokeWidth:"3",opacity:"0.4"})],this.svgNames=[u("1"),u("2"),u("3")];for(let t=0;t<this.svgHeights.length;++t)switch(this.svgHeights[t].setAttribute("cursor","pointer"),t){case 0:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,2);break;case 1:this.svgHeights[t].onclick=()=>this.animatePointSwap(0,2);break;case 2:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,0)}t.append(...this.svgHeights),t.append(...this.svgSides),t.append(...this.svgPoints),t.append(...this.svgNames),this.draw(),setInterval(()=>{if(void 0!==this.animation){const{value:t,done:e}=this.animation.next();e?this.animation=void 0:this.triangle=t,this.draw()}})}animateTriangleRotation(t){void 0===this.animation&&(this.animation=function*(t,e,i){const n=2*i*Math.PI/3;let s=0;for(;s<=1;s+=1e-4*t)yield r(e,n*s);1!==s&&(yield r(e,n))}(o,this.triangle,t))}animatePointSwap(t,e){void 0===this.animation&&(this.animation=function*(t,e,i,s){const r={a:e[i],b:e[s]},o={a:e[s],b:e[i]};let a=0;for(;a<=1;a+=1e-4*t){const t=[...e];t[i]=n(e[i],r,a),t[s]=n(e[s],o,a),yield t}if(1!==a){const t=[...e];t[i]=e[s],t[s]=e[i],yield t}}(o,this.triangle,t,e))}draw(){const t=[{a:s((e=this.triangle)[1],e[2]),b:e[0]},{a:s(e[0],e[2]),b:e[1]},{a:s(e[0],e[1]),b:e[2]}];var e;const i=function(t){return[{a:t[0],b:t[1]},{a:t[1],b:t[2]},{a:t[2],b:t[0]}]}(this.triangle);for(let e=0;e<this.triangle.length;++e){const n=this.triangle[e],s=t[e],r=i[e];this.svgHeights[e].setAttribute("x1",(130*s.a.x).toString()),this.svgHeights[e].setAttribute("y1",(130*s.a.y).toString()),this.svgHeights[e].setAttribute("x2",(130*s.b.x).toString()),this.svgHeights[e].setAttribute("y2",(130*s.b.y).toString()),this.svgSides[e].setAttribute("x1",(130*r.a.x).toString()),this.svgSides[e].setAttribute("y1",(130*r.a.y).toString()),this.svgSides[e].setAttribute("x2",(130*r.b.x).toString()),this.svgSides[e].setAttribute("y2",(130*r.b.y).toString()),this.svgPoints[e].setAttribute("cx",(130*n.x).toString()),this.svgPoints[e].setAttribute("cy",(130*n.y).toString());const o={x:n.x,y:n.y-.015};this.svgNames[e].setAttribute("x",(130*o.x).toString()),this.svgNames[e].setAttribute("y",(130*o.y).toString())}}}function c(t){const e=h("circle");return e.setAttribute("r",t),e}function u(t){const e=h("text");return e.setAttribute("text-anchor","middle"),e.setAttribute("style","font-size: 15px"),e.innerHTML=t,e}function g(t={}){const e=h("line");return e.setAttribute("stroke",t.stroke||"black"),void 0!==t.strokeWidth&&e.setAttribute("stroke-width",t.strokeWidth),void 0!==t.opacity&&e.setAttribute("opacity",t.opacity),e}function h(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function l(t,e,i){const n=document.getElementById(t),s=document.getElementById(e),r=document.getElementById(i);if(null===n)throw new Error("No SVG element with requested ID");if(null===s||null===r)throw new Error("No button with requested ID");const o=new a(n);s.onclick=()=>o.animateTriangleRotation(1),r.onclick=()=>o.animateTriangleRotation(-1)}l("left-triangle","left-rotate-1","left-rotate-2"),l("right-triangle","right-rotate-1","right-rotate-2")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
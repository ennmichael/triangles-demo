!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t,e,i){const n=(r=e.a,{x:(s=e.b).x-r.x,y:s.y-r.y});var r,s;return{x:t.x+n.x*i,y:t.y+n.y*i}}function r(t,e){return{x:(t.x+e.x)/2,y:(t.y+e.y)/2}}function s(t,e){const i=Math.cos(e),n=Math.sin(e);return t.map(({x:t,y:e})=>({x:t*i-e*n,y:t*n+e*i}))}i.r(e);const o=100;class a{constructor(t){this.svg=t,this.triangle=function(){const t=.5*Math.sqrt(3);return[{x:0,y:-2*t/3},{x:.5,y:t/3},{x:-.5,y:t/3}]}(),this.svgPoints=[c("1.2"),c("1.2"),c("1.2")],this.svgSides=[u(),u(),u()],this.svgHeights=[u({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),u({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),u({stroke:"grey",strokeWidth:"3",opacity:"0.4"})];for(let t=0;t<this.svgHeights.length;++t)switch(this.svgHeights[t].setAttribute("cursor","pointer"),t){case 0:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,2);break;case 1:this.svgHeights[t].onclick=()=>this.animatePointSwap(0,2);break;case 2:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,0)}t.append(...this.svgHeights),t.append(...this.svgSides),t.append(...this.svgPoints),this.draw(),setInterval(()=>{if(void 0!==this.animation){const{value:t,done:e}=this.animation.next();e?this.animation=void 0:this.triangle=t,this.draw()}})}animateTriangleRotation(t){void 0===this.animation&&(this.animation=function*(t,e,i){const n=2*i*Math.PI/3;let r=0;for(;r<=1;r+=1e-4*t)yield s(e,n*r);1!==r&&(yield s(e,n))}(o,this.triangle,t))}animatePointSwap(t,e){void 0===this.animation&&(this.animation=function*(t,e,i,r){const s={a:e[i],b:e[r]},o={a:e[r],b:e[i]};let a=0;for(;a<=1;a+=1e-4*t){const t=[...e];t[i]=n(e[i],s,a),t[r]=n(e[r],o,a),yield t}if(1!==a){const t=[...e];t[i]=e[r],t[r]=e[i],yield t}}(o,this.triangle,t,e))}draw(){const t=[{a:r((e=this.triangle)[1],e[2]),b:e[0]},{a:r(e[0],e[2]),b:e[1]},{a:r(e[0],e[1]),b:e[2]}];var e;const i=function(t){return[{a:t[0],b:t[1]},{a:t[1],b:t[2]},{a:t[2],b:t[0]}]}(this.triangle);for(let e=0;e<this.triangle.length;++e){const n=this.triangle[e],r=t[e],s=i[e];this.svgHeights[e].setAttribute("x1",(150*r.a.x).toString()),this.svgHeights[e].setAttribute("y1",(150*r.a.y).toString()),this.svgHeights[e].setAttribute("x2",(150*r.b.x).toString()),this.svgHeights[e].setAttribute("y2",(150*r.b.y).toString()),this.svgSides[e].setAttribute("x1",(150*s.a.x).toString()),this.svgSides[e].setAttribute("y1",(150*s.a.y).toString()),this.svgSides[e].setAttribute("x2",(150*s.b.x).toString()),this.svgSides[e].setAttribute("y2",(150*s.b.y).toString()),this.svgPoints[e].setAttribute("cx",(150*n.x).toString()),this.svgPoints[e].setAttribute("cy",(150*n.y).toString())}}}function c(t){const e=g("circle");return e.setAttribute("r",t),e}function u(t={}){const e=g("line");return e.setAttribute("stroke",t.stroke||"black"),void 0!==t.strokeWidth&&e.setAttribute("stroke-width",t.strokeWidth),void 0!==t.opacity&&e.setAttribute("opacity",t.opacity),e}function g(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function h(t,e,i){const n=document.getElementById(t),r=document.getElementById(e),s=document.getElementById(i);if(null===n)throw new Error("No SVG element with requested ID");if(null===r||null===s)throw new Error("No button with requested ID");const o=new a(n);r.onclick=()=>o.animateTriangleRotation(1),s.onclick=()=>o.animateTriangleRotation(-1)}h("left-triangle","left-rotate-1","left-rotate-2"),h("right-triangle","right-rotate-1","right-rotate-2")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
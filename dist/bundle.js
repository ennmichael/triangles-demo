!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";function i(t,e){return{x:(t.x+e.x)/2,y:(t.y+e.y)/2}}function n(){var t=.5*Math.sqrt(3);return[{x:0,y:-t/3},{x:.5,y:2*t/3},{x:-.5,y:2*t/3}]}r.r(e);var s=function(){function t(t,e){this.svg=t,this.triangle=e,this.svgPoints=[o("1.2"),o("1.2"),o("1.2")],this.svgSides=[u(),u(),u()],this.svgHeights=[u({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),u({stroke:"grey",strokeWidth:"3",opacity:"0.4"}),u({stroke:"grey",strokeWidth:"3",opacity:"0.4"})],t.append.apply(t,this.svgHeights),t.append.apply(t,this.svgSides),t.append.apply(t,this.svgPoints)}return t.prototype.draw=function(){for(var t,e=[{a:i((t=this.triangle)[1],t[2]),b:t[0]},{a:i(t[0],t[2]),b:t[1]},{a:i(t[0],t[1]),b:t[2]}],r=function(t){return[{a:t[0],b:t[1]},{a:t[1],b:t[2]},{a:t[2],b:t[0]}]}(this.triangle),n=0;n<this.triangle.length;++n){var s=this.triangle[n],o=e[n],u=r[n];this.svgHeights[n].setAttribute("x1",(150*o.a.x).toString()),this.svgHeights[n].setAttribute("y1",(150*o.a.y).toString()),this.svgHeights[n].setAttribute("x2",(150*o.b.x).toString()),this.svgHeights[n].setAttribute("y2",(150*o.b.y).toString()),this.svgSides[n].setAttribute("x1",(150*u.a.x).toString()),this.svgSides[n].setAttribute("y1",(150*u.a.y).toString()),this.svgSides[n].setAttribute("x2",(150*u.b.x).toString()),this.svgSides[n].setAttribute("y2",(150*u.b.y).toString()),this.svgPoints[n].setAttribute("cx",(150*s.x).toString()),this.svgPoints[n].setAttribute("cy",(150*s.y).toString())}},t}();function o(t){var e=a("circle");return e.setAttribute("r",t),e}function u(t){void 0===t&&(t={});var e=a("line");return e.setAttribute("stroke",t.stroke||"black"),void 0!==t.strokeWidth&&e.setAttribute("stroke-width",t.strokeWidth),void 0!==t.opacity&&e.setAttribute("opacity",t.opacity),e}function a(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function g(){var t=document.getElementById("left-triangle"),e=document.getElementById("right-triangle");if(null===t||null===e)throw new Error("No SVG element with requested ID");var r=n(),i=new s(t,r),o=n(),u=new s(e,o);i.draw(),u.draw()}r.d(e,"drawTriangles",(function(){return g})),g()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
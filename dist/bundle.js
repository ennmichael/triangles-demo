!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t,e,i){const n=(r=e.a,{x:(s=e.b).x-r.x,y:s.y-r.y});var r,s;return{x:t.x+n.x*i,y:t.y+n.y*i}}function r(t,e){return{x:(t.x+e.x)/2,y:(t.y+e.y)/2}}i.r(e);const s=.0025;function o(t,e){const i=2*e*Math.PI/3;let n=0;return e=>{if(1!==n)return n=Math.min(n+s*e,1),function(t,e){const i=Math.cos(e),n=Math.sin(e);return t.map(({x:t,y:e})=>({x:t*i-e*n,y:t*n+e*i}))}(t,i*n)}}class a{constructor(t){this.svg=t,this.triangle=function(){const t=.5*Math.sqrt(3);return[{x:0,y:-2*t/3},{x:.5,y:t/3},{x:-.5,y:t/3}]}(),this.svgPoints=[u("1.2"),u("1.2"),u("1.2")],this.svgSides=[h(),h(),h()],this.svgHeights=[h({stroke:"grey",strokeWidth:"5",opacity:"0.4"}),h({stroke:"grey",strokeWidth:"5",opacity:"0.4"}),h({stroke:"grey",strokeWidth:"5",opacity:"0.4"})],this.svgNames=[c("1"),c("2"),c("3")];for(let t=0;t<this.svgHeights.length;++t)switch(this.svgHeights[t].setAttribute("cursor","pointer"),t){case 0:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,2);break;case 1:this.svgHeights[t].onclick=()=>this.animatePointSwap(0,2);break;case 2:this.svgHeights[t].onclick=()=>this.animatePointSwap(1,0)}let e;t.append(...this.svgHeights),t.append(...this.svgSides),t.append(...this.svgPoints),t.append(...this.svgNames),this.draw();const i=t=>{void 0===e&&(e=t);const n=t-e;if(void 0!==this.animation){const t=this.animation(n);void 0!==t?this.triangle=t:this.animation=void 0,this.draw()}e=t,requestAnimationFrame(i)};requestAnimationFrame(i)}animateTriangleRotation(t){void 0===this.animation&&(this.animation=o(this.triangle,t))}animatePointSwap(t,e){void 0===this.animation&&(this.animation=function(t,e,i){const r={a:t[e],b:t[i]},o={a:t[i],b:t[e]};let a=0;return u=>{if(1===a)return;a=Math.min(a+s*u,1);const c=[...t];return c[e]=n(t[e],r,a),c[i]=n(t[i],o,a),c}}(this.triangle,t,e))}draw(){const t=[{a:r((e=this.triangle)[1],e[2]),b:e[0]},{a:r(e[0],e[2]),b:e[1]},{a:r(e[0],e[1]),b:e[2]}];var e;const i=function(t){return[{a:t[0],b:t[1]},{a:t[1],b:t[2]},{a:t[2],b:t[0]}]}(this.triangle);for(let e=0;e<this.triangle.length;++e){const n=this.triangle[e],r=t[e],s=i[e];this.svgHeights[e].setAttribute("x1",(130*r.a.x).toString()),this.svgHeights[e].setAttribute("y1",(130*r.a.y).toString()),this.svgHeights[e].setAttribute("x2",(130*r.b.x).toString()),this.svgHeights[e].setAttribute("y2",(130*r.b.y).toString()),this.svgSides[e].setAttribute("x1",(130*s.a.x).toString()),this.svgSides[e].setAttribute("y1",(130*s.a.y).toString()),this.svgSides[e].setAttribute("x2",(130*s.b.x).toString()),this.svgSides[e].setAttribute("y2",(130*s.b.y).toString()),this.svgPoints[e].setAttribute("cx",(130*n.x).toString()),this.svgPoints[e].setAttribute("cy",(130*n.y).toString());const o={x:n.x,y:n.y-.015};this.svgNames[e].setAttribute("x",(130*o.x).toString()),this.svgNames[e].setAttribute("y",(130*o.y).toString())}}}function u(t){const e=g("circle");return e.setAttribute("r",t),e}function c(t){const e=g("text");return e.setAttribute("text-anchor","middle"),e.setAttribute("style","font-size: 15px"),e.innerHTML=t,e}function h(t={}){const e=g("line");return e.setAttribute("stroke",t.stroke||"black"),void 0!==t.strokeWidth&&e.setAttribute("stroke-width",t.strokeWidth),void 0!==t.opacity&&e.setAttribute("opacity",t.opacity),e}function g(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function l(t,e,i){const n=document.getElementById(t),r=document.getElementById(e),s=document.getElementById(i);if(null===n)throw new Error("No SVG element with requested ID");if(null===r||null===s)throw new Error("No button with requested ID");const o=new a(n);r.onclick=()=>o.animateTriangleRotation(-1),s.onclick=()=>o.animateTriangleRotation(1)}l("left-triangle","left-rotate-1","left-rotate-2"),l("right-triangle","right-rotate-1","right-rotate-2")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dlb21ldHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy9hbmltYXRpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy90cmlhbmdsZURyYXdpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidHJhbnNsYXRlIiwiZGlzIiwicDEiLCJhIiwieCIsInAyIiwiYiIsInkiLCJtaWRwb2ludCIsInNwZWVkIiwidHJpYW5nbGVSb3RhdGVBbmltYXRpb24iLCJ0cmlhbmdsZSIsImRpcmVjdGlvbiIsImFuZ2xlIiwiTWF0aCIsIlBJIiwiZHQiLCJtaW4iLCJjb3MiLCJzaW4iLCJtYXAiLCJyb3RhdGVUcmlhbmdsZSIsInN2ZyIsImgiLCJzcXJ0IiwiY3JlYXRlVHJpYW5nbGUiLCJzdmdQb2ludHMiLCJjcmVhdGVTVkdQb2ludCIsInN2Z1NpZGVzIiwiY3JlYXRlU1ZHTGluZSIsInN2Z0hlaWdodHMiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsIm9wYWNpdHkiLCJzdmdOYW1lcyIsImNyZWF0ZVN2Z1RleHQiLCJ0aGlzIiwibGVuZ3RoIiwic2V0QXR0cmlidXRlIiwib25jbGljayIsImFuaW1hdGVQb2ludFN3YXAiLCJsYXN0VGltZSIsImFwcGVuZCIsImRyYXciLCJmcmFtZSIsInRpbWUiLCJ1bmRlZmluZWQiLCJkZWx0YVRpbWUiLCJhbmltYXRpb24iLCJuZXdUcmlhbmdsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZpcnN0UG9pbnRJbmRleCIsInNlY29uZFBvaW50SW5kZXgiLCJmaXJzdFRvU2Vjb25kIiwic2Vjb25kVG9GaXJzdCIsInBvaW50U3dhcEFuaW1hdGlvbiIsImhlaWdodHMiLCJzaWRlcyIsInRyaWFuZ2xlU2lkZXMiLCJ0b1N0cmluZyIsIm5hbWVQb3NpdGlvbiIsInJhZGl1cyIsImNyZWF0ZVN2Z0VsZW1lbnQiLCJjb250ZW50IiwidGV4dCIsImlubmVySFRNTCIsIm9wdGlvbnMiLCJsaW5lIiwidGFnTmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlSFRNTFRyaWFuZ2xlIiwic3ZnSWQiLCJsZWZ0Um90YXRlQnV0dG9uSWQiLCJyaWdodFJvdGF0ZUJ1dHRvbklkIiwiZ2V0RWxlbWVudEJ5SWQiLCJsZWZ0Um90YXRlQnV0dG9uIiwicmlnaHRSb3RhdGVCdXR0b24iLCJFcnJvciIsImRyYXdpbmciLCJhbmltYXRlVHJpYW5nbGVSb3RhdGlvbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFB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QkMsRUFDN0IsTUFBTSxJQUFJQyxNQUFNLCtCQUVwQixNQUFNQyxFQUFVLElBQUksRUFBZ0J6RCxHQUNwQ3NELEVBQWlCckMsUUFBVSxJQUFNd0MsRUFBUUMseUJBQXlCLEdBQ2xFSCxFQUFrQnRDLFFBQVUsSUFBTXdDLEVBQVFDLHdCQUF3QixHQUd0RVQsRUFBbUIsZ0JBQWlCLGdCQUFpQixpQkFDckRBLEVBQW1CLGlCQUFrQixpQkFBa0IiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGludGVyZmFjZSBQb2ludCB7XG4gICAgcmVhZG9ubHkgeDogbnVtYmVyXG4gICAgcmVhZG9ubHkgeTogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZSB7XG4gICAgcmVhZG9ubHkgYTogUG9pbnRcbiAgICByZWFkb25seSBiOiBQb2ludFxufVxuXG5leHBvcnQgdHlwZSBUcmlhbmdsZSA9IHJlYWRvbmx5IFBvaW50W11cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYWNlbWVudChwMTogUG9pbnQsIHAyOiBQb2ludCk6IFBvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMi54IC0gcDEueCxcbiAgICAgICAgeTogcDIueSAtIHAxLnksXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKHA6IFBvaW50LCBkOiBMaW5lLCB0OiBudW1iZXIpOiBQb2ludCB7XG4gICAgY29uc3QgZGlzID0gZGlzcGxhY2VtZW50KGQuYSwgZC5iKVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAueCArIGRpcy54ICogdCxcbiAgICAgICAgeTogcC55ICsgZGlzLnkgKiB0LFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pZHBvaW50KGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiAoYS54ICsgYi54KSAvIDIsXG4gICAgICAgIHk6IChhLnkgKyBiLnkpIC8gMixcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmlhbmdsZSgpOiBUcmlhbmdsZSB7XG4gICAgY29uc3QgYSA9IDFcbiAgICBjb25zdCBoID0gYSAvIDIgKiBNYXRoLnNxcnQoMylcbiAgICByZXR1cm4gW1xuICAgICAgICB7IHg6IDAsIHk6IC0yICogaCAvIDMgfSxcbiAgICAgICAgeyB4OiBhIC8gMiwgeTogaCAvIDMgfSxcbiAgICAgICAgeyB4OiAtYSAvIDIsIHk6IGggLyAzIH0sXG4gICAgXVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIHRyaWFuZ2xlIGhlaWdodCBsaW5lcy4gVGhlIGl0aCBsaW5lIGlzIGFsd2F5cyBjb25uZWN0ZWQgdG8gdGhlIGl0aCBwb2ludFxuICogYW5kIHRoZSBtaWRkbGUgb2YgdGhlIG9wcG9zaXRlIHNpZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlhbmdsZUhlaWdodHModDogVHJpYW5nbGUpOiBbTGluZSwgTGluZSwgTGluZV0ge1xuICAgIHJldHVybiBbXG4gICAgICAgIHsgYTogbWlkcG9pbnQodFsxXSwgdFsyXSksIGI6IHRbMF0gfSxcbiAgICAgICAgeyBhOiBtaWRwb2ludCh0WzBdLCB0WzJdKSwgYjogdFsxXSB9LFxuICAgICAgICB7IGE6IG1pZHBvaW50KHRbMF0sIHRbMV0pLCBiOiB0WzJdIH0sXG4gICAgXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpYW5nbGVTaWRlcyh0OiBUcmlhbmdsZSk6IFtMaW5lLCBMaW5lLCBMaW5lXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgeyBhOiB0WzBdLCBiOiB0WzFdIH0sXG4gICAgICAgIHsgYTogdFsxXSwgYjogdFsyXSB9LFxuICAgICAgICB7IGE6IHRbMl0sIGI6IHRbMF0gfSxcbiAgICBdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlhbmdsZUNlbnRlcih0OiBUcmlhbmdsZSk6IFBvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiAodFswXS54ICsgdFsxXS54ICsgdFsyXS54KSAvIDMsXG4gICAgICAgIHk6ICh0WzBdLnkgKyB0WzFdLnkgKyB0WzJdLnkpIC8gMyxcbiAgICB9XG59XG5cbi8qKlxuICogQHJldHVybnMgVGhlIHRyaWFuZ2xlIHQgcm90YXRlIGJ5IGFuZ2xlIHJhZGlhbnMuXG4gKiBAcGFyYW0gdCBUaGUgdGFyZ2V0IHRyaWFuZ2xlLlxuICogQHBhcmFtIGFuZ2xlIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlVHJpYW5nbGUodDogVHJpYW5nbGUsIGFuZ2xlOiBudW1iZXIpOiBUcmlhbmdsZSB7XG4gICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGUpXG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGUpXG4gICAgcmV0dXJuIHQubWFwKCh7IHgsIHkgfSkgPT4gKHtcbiAgICAgICAgeDogeCAqIGNvcyAtIHkgKiBzaW4sXG4gICAgICAgIHk6IHggKiBzaW4gKyB5ICogY29zLFxuICAgIH0pKVxufVxuIiwiaW1wb3J0IHsgVHJpYW5nbGUsIHJvdGF0ZVRyaWFuZ2xlLCBkaXNwbGFjZW1lbnQsIHRyYW5zbGF0ZSB9IGZyb20gXCIuL2dlb21ldHJ5XCJcblxuLyoqXG4gKiBBbiBhbmltYXRpb24gaXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGRpZmZlcmVudCB0cmlhbmdsZXMgd2l0aCB0aW1lLFxuICogb3IgdW5kZWZpbmVkIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBkb25lLlxuICovXG5leHBvcnQgdHlwZSBBbmltYXRpb24gPSAoZGVsdGFUaW1lOiBudW1iZXIpID0+IFRyaWFuZ2xlfHVuZGVmaW5lZFxuXG5jb25zdCBzcGVlZCA9IDIuNWUtM1xuXG4vKipcbiAqIEByZXR1cm5zIEFuIGFuaW1hdGlvbiB3aGljaCBtb3ZlcyB0aGUgdHdvIHBvaW50cyBzbyB0aGF0IHRoZXkgZW5kIHVwIHN3YXBwZWQuXG4gKiBAcGFyYW0gdHJpYW5nbGUgVGhlIHRhcmdldCB0cmlhbmdsZS5cbiAqIEBwYXJhbSBmaXJzdFBvaW50SW5kZXggSW5kZXggb2YgZmlyc3QgcG9pbnQgdG8gbW92ZS5cbiAqIEBwYXJhbSBzZWNvbmRQb2ludEluZGV4IEluZGV4IG9mIHNlY29uZCBwb2ludCB0byBtb3ZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRTd2FwQW5pbWF0aW9uKFxuICAgIHRyaWFuZ2xlOiBUcmlhbmdsZSxcbiAgICBmaXJzdFBvaW50SW5kZXg6IG51bWJlcixcbiAgICBzZWNvbmRQb2ludEluZGV4OiBudW1iZXIsXG4pOiBBbmltYXRpb24ge1xuICAgIGNvbnN0IGZpcnN0VG9TZWNvbmQgPSB7IGE6IHRyaWFuZ2xlW2ZpcnN0UG9pbnRJbmRleF0sIGI6IHRyaWFuZ2xlW3NlY29uZFBvaW50SW5kZXhdIH1cbiAgICBjb25zdCBzZWNvbmRUb0ZpcnN0ID0geyBhOiB0cmlhbmdsZVtzZWNvbmRQb2ludEluZGV4XSwgYjogdHJpYW5nbGVbZmlyc3RQb2ludEluZGV4XSB9XG4gICAgbGV0IHQgPSAwXG5cbiAgICByZXR1cm4gKGR0KSA9PiB7XG4gICAgICAgIGlmICh0ID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICAgICAgIHQgPSBNYXRoLm1pbih0ICsgc3BlZWQgKiBkdCwgMSlcbiAgICAgICAgY29uc3QgbmV3VHJpYW5nbGUgPSBbLi4udHJpYW5nbGVdXG4gICAgICAgIG5ld1RyaWFuZ2xlW2ZpcnN0UG9pbnRJbmRleF0gPSB0cmFuc2xhdGUodHJpYW5nbGVbZmlyc3RQb2ludEluZGV4XSwgZmlyc3RUb1NlY29uZCwgdClcbiAgICAgICAgbmV3VHJpYW5nbGVbc2Vjb25kUG9pbnRJbmRleF0gPSB0cmFuc2xhdGUodHJpYW5nbGVbc2Vjb25kUG9pbnRJbmRleF0sIHNlY29uZFRvRmlyc3QsIHQpXG4gICAgICAgIHJldHVybiBuZXdUcmlhbmdsZVxuICAgIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyBBbiBhbmltYXRpb24gd2hpY2ggcm90YXRlcyB0aGUgZ2l2ZW4gdHJpYW5nbGUgZm9yIDEyMCBkZWdyZWVzLlxuICogQHBhcmFtIHRyaWFuZ2xlIFRoZSB0cmlhbmdsZSB0byByb3RhdGUuXG4gKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSByb3RhdGlvbiBkaXJlY3Rpb24uIDEgbWVhbnMgMTIwIGRlZ3JlZXMsIC0xIG1lYW5zIC0xMjAgZGVncmVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWFuZ2xlUm90YXRlQW5pbWF0aW9uKFxuICAgIHRyaWFuZ2xlOiBUcmlhbmdsZSxcbiAgICBkaXJlY3Rpb246IG51bWJlcixcbik6IEFuaW1hdGlvbiB7XG4gICAgY29uc3QgYW5nbGUgPSBkaXJlY3Rpb24gKiAyICogTWF0aC5QSSAvIDNcbiAgICBsZXQgdCA9IDBcblxuICAgIHJldHVybiAoZHQpID0+IHtcbiAgICAgICAgaWYgKHQgPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIFxuICAgICAgICB0ID0gTWF0aC5taW4odCArIHNwZWVkICogZHQsIDEpXG4gICAgICAgIHJldHVybiByb3RhdGVUcmlhbmdsZSh0cmlhbmdsZSwgYW5nbGUgKiB0KVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyaWFuZ2xlLCB0cmlhbmdsZUhlaWdodHMsIHRyaWFuZ2xlU2lkZXMsIGNyZWF0ZVRyaWFuZ2xlLCB0cmFuc2xhdGUgfSBmcm9tIFwiLi9nZW9tZXRyeVwiXG5pbXBvcnQgeyBBbmltYXRpb24sIHRyaWFuZ2xlUm90YXRlQW5pbWF0aW9uLCBwb2ludFN3YXBBbmltYXRpb24gfSBmcm9tICcuL2FuaW1hdGlvbnMnXG5cbmNvbnN0IHRpbWVzdGVwID0gMjBcblxuZXhwb3J0IHR5cGUgSGVpZ2h0Q2xpY2tDYWxsYmFjayA9ICgpID0+IHZvaWRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJpYW5nbGVEcmF3aW5nIHtcbiAgICBwcml2YXRlIGFuaW1hdGlvbjogQW5pbWF0aW9ufHVuZGVmaW5lZFxuICAgIHByaXZhdGUgdHJpYW5nbGUgPSBjcmVhdGVUcmlhbmdsZSgpXG4gICAgcHJpdmF0ZSBzdmdQb2ludHMgPSBbY3JlYXRlU1ZHUG9pbnQoJzEuMicpLCBjcmVhdGVTVkdQb2ludCgnMS4yJyksIGNyZWF0ZVNWR1BvaW50KCcxLjInKV1cbiAgICBwcml2YXRlIHN2Z1NpZGVzID0gW2NyZWF0ZVNWR0xpbmUoKSwgY3JlYXRlU1ZHTGluZSgpLCBjcmVhdGVTVkdMaW5lKCldXG4gICAgcHJpdmF0ZSBzdmdIZWlnaHRzID0gW1xuICAgICAgICBjcmVhdGVTVkdMaW5lKHsgc3Ryb2tlOiAnZ3JleScsIHN0cm9rZVdpZHRoOiAnNScsIG9wYWNpdHk6ICcwLjQnIH0pLFxuICAgICAgICBjcmVhdGVTVkdMaW5lKHsgc3Ryb2tlOiAnZ3JleScsIHN0cm9rZVdpZHRoOiAnNScsIG9wYWNpdHk6ICcwLjQnIH0pLFxuICAgICAgICBjcmVhdGVTVkdMaW5lKHsgc3Ryb2tlOiAnZ3JleScsIHN0cm9rZVdpZHRoOiAnNScsIG9wYWNpdHk6ICcwLjQnIH0pLFxuICAgIF1cbiAgICBwcml2YXRlIHN2Z05hbWVzID0gW1xuICAgICAgICBjcmVhdGVTdmdUZXh0KCcxJyksXG4gICAgICAgIGNyZWF0ZVN2Z1RleHQoJzInKSxcbiAgICAgICAgY3JlYXRlU3ZnVGV4dCgnMycpLFxuICAgIF1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ZnOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ZnSGVpZ2h0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLnNldEF0dHJpYnV0ZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN2Z0hlaWdodHNbaV0ub25jbGljayA9ICgpID0+IHRoaXMuYW5pbWF0ZVBvaW50U3dhcCgxLCAyKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLm9uY2xpY2sgPSAoKSA9PiB0aGlzLmFuaW1hdGVQb2ludFN3YXAoMCwgMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ZnSGVpZ2h0c1tpXS5vbmNsaWNrID0gKCkgPT4gdGhpcy5hbmltYXRlUG9pbnRTd2FwKDEsIDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdmcuYXBwZW5kKC4uLnRoaXMuc3ZnSGVpZ2h0cylcbiAgICAgICAgc3ZnLmFwcGVuZCguLi50aGlzLnN2Z1NpZGVzKVxuICAgICAgICBzdmcuYXBwZW5kKC4uLnRoaXMuc3ZnUG9pbnRzKVxuICAgICAgICBzdmcuYXBwZW5kKC4uLnRoaXMuc3ZnTmFtZXMpXG5cbiAgICAgICAgdGhpcy5kcmF3KClcblxuICAgICAgICBsZXQgbGFzdFRpbWU6IG51bWJlcnx1bmRlZmluZWRcbiAgICAgICAgY29uc3QgZnJhbWUgPSAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAobGFzdFRpbWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBsYXN0VGltZSA9IHRpbWVcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhVGltZSA9IHRpbWUgLSBsYXN0VGltZVxuXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RyaWFuZ2xlID0gdGhpcy5hbmltYXRpb24oZGVsdGFUaW1lKVxuICAgICAgICAgICAgICAgIGlmIChuZXdUcmlhbmdsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWFuZ2xlID0gbmV3VHJpYW5nbGVcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdFRpbWUgPSB0aW1lXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWUpXG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWUpXG4gICAgfVxuXG4gICAgcHVibGljIGFuaW1hdGVUcmlhbmdsZVJvdGF0aW9uKGRpcmVjdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdHJpYW5nbGVSb3RhdGVBbmltYXRpb24odGhpcy50cmlhbmdsZSwgZGlyZWN0aW9uKVxuICAgIH1cblxuICAgIHB1YmxpYyBhbmltYXRlUG9pbnRTd2FwKGZpcnN0UG9pbnRJbmRleDogbnVtYmVyLCBzZWNvbmRQb2ludEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBwb2ludFN3YXBBbmltYXRpb24odGhpcy50cmlhbmdsZSwgZmlyc3RQb2ludEluZGV4LCBzZWNvbmRQb2ludEluZGV4KVxuICAgIH1cblxuICAgIHByaXZhdGUgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2NhbGluZyA9IDEzMFxuICAgICAgICBjb25zdCBoZWlnaHRzID0gdHJpYW5nbGVIZWlnaHRzKHRoaXMudHJpYW5nbGUpXG4gICAgICAgIGNvbnN0IHNpZGVzID0gdHJpYW5nbGVTaWRlcyh0aGlzLnRyaWFuZ2xlKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmlhbmdsZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMudHJpYW5nbGVbaV1cbiAgICAgICAgICAgIGNvbnN0IGggPSBoZWlnaHRzW2ldXG4gICAgICAgICAgICBjb25zdCBzID0gc2lkZXNbaV1cblxuICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLnNldEF0dHJpYnV0ZSgneDEnLCAoaC5hLnggKiBzY2FsaW5nKS50b1N0cmluZygpKVxuICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLnNldEF0dHJpYnV0ZSgneTEnLCAoaC5hLnkgKiBzY2FsaW5nKS50b1N0cmluZygpKVxuICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLnNldEF0dHJpYnV0ZSgneDInLCAoaC5iLnggKiBzY2FsaW5nKS50b1N0cmluZygpKVxuICAgICAgICAgICAgdGhpcy5zdmdIZWlnaHRzW2ldLnNldEF0dHJpYnV0ZSgneTInLCAoaC5iLnkgKiBzY2FsaW5nKS50b1N0cmluZygpKVxuICAgICAgICAgICAgdGhpcy5zdmdTaWRlc1tpXS5zZXRBdHRyaWJ1dGUoJ3gxJywgKHMuYS54ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIHRoaXMuc3ZnU2lkZXNbaV0uc2V0QXR0cmlidXRlKCd5MScsIChzLmEueSAqIHNjYWxpbmcpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICB0aGlzLnN2Z1NpZGVzW2ldLnNldEF0dHJpYnV0ZSgneDInLCAocy5iLnggKiBzY2FsaW5nKS50b1N0cmluZygpKVxuICAgICAgICAgICAgdGhpcy5zdmdTaWRlc1tpXS5zZXRBdHRyaWJ1dGUoJ3kyJywgKHMuYi55ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIHRoaXMuc3ZnUG9pbnRzW2ldLnNldEF0dHJpYnV0ZSgnY3gnLCAocC54ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIHRoaXMuc3ZnUG9pbnRzW2ldLnNldEF0dHJpYnV0ZSgnY3knLCAocC55ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbmFtZVBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHg6IHAueCxcbiAgICAgICAgICAgICAgICB5OiBwLnkgLSAwLjAxNSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3ZnTmFtZXNbaV0uc2V0QXR0cmlidXRlKCd4JywgKG5hbWVQb3NpdGlvbi54ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIHRoaXMuc3ZnTmFtZXNbaV0uc2V0QXR0cmlidXRlKCd5JywgKG5hbWVQb3NpdGlvbi55ICogc2NhbGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU1ZHUG9pbnQocmFkaXVzOiBzdHJpbmcpOiBTVkdDaXJjbGVFbGVtZW50IHtcbiAgICBjb25zdCBjID0gY3JlYXRlU3ZnRWxlbWVudCgnY2lyY2xlJykgYXMgU1ZHQ2lyY2xlRWxlbWVudFxuICAgIGMuc2V0QXR0cmlidXRlKCdyJywgcmFkaXVzKVxuICAgIHJldHVybiBjXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN2Z1RleHQoY29udGVudDogc3RyaW5nKTogU1ZHVGV4dEVsZW1lbnQge1xuICAgIGNvbnN0IHRleHQgPSBjcmVhdGVTdmdFbGVtZW50KCd0ZXh0JykgYXMgU1ZHVGV4dEVsZW1lbnRcbiAgICB0ZXh0LnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICB0ZXh0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZm9udC1zaXplOiAxNXB4JylcbiAgICB0ZXh0LmlubmVySFRNTCA9IGNvbnRlbnRcbiAgICByZXR1cm4gdGV4dFxufVxuXG5mdW5jdGlvbiBjcmVhdGVTVkdMaW5lKFxuICAgIG9wdGlvbnM6IHsgc3Ryb2tlPzogc3RyaW5nLCBzdHJva2VXaWR0aD86IHN0cmluZywgb3BhY2l0eT86IHN0cmluZyB9ID0ge31cbik6IFNWR0xpbmVFbGVtZW50IHtcbiAgICBjb25zdCBsaW5lID0gY3JlYXRlU3ZnRWxlbWVudCgnbGluZScpIGFzIFNWR0xpbmVFbGVtZW50XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIG9wdGlvbnMuc3Ryb2tlIHx8ICdibGFjaycpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnN0cm9rZVdpZHRoICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIG9wdGlvbnMuc3Ryb2tlV2lkdGgpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsIG9wdGlvbnMub3BhY2l0eSlcbiAgICByZXR1cm4gbGluZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdmdFbGVtZW50KHRhZ05hbWU6IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgdGFnTmFtZSlcbn1cbiIsImltcG9ydCBUcmlhbmdsZURyYXdpbmcgZnJvbSAnLi90cmlhbmdsZURyYXdpbmcnXG5cbmZ1bmN0aW9uIGNyZWF0ZUhUTUxUcmlhbmdsZShcbiAgICBzdmdJZDogc3RyaW5nLFxuICAgIGxlZnRSb3RhdGVCdXR0b25JZDogc3RyaW5nLFxuICAgIHJpZ2h0Um90YXRlQnV0dG9uSWQ6IHN0cmluZyxcbik6IHZvaWQge1xuICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN2Z0lkKVxuICAgIGNvbnN0IGxlZnRSb3RhdGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZWZ0Um90YXRlQnV0dG9uSWQpXG4gICAgY29uc3QgcmlnaHRSb3RhdGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyaWdodFJvdGF0ZUJ1dHRvbklkKVxuICAgIGlmIChzdmcgPT09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gU1ZHIGVsZW1lbnQgd2l0aCByZXF1ZXN0ZWQgSUQnKVxuICAgIGlmIChsZWZ0Um90YXRlQnV0dG9uID09PSBudWxsIHx8IHJpZ2h0Um90YXRlQnV0dG9uID09PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGJ1dHRvbiB3aXRoIHJlcXVlc3RlZCBJRCcpXG5cbiAgICBjb25zdCBkcmF3aW5nID0gbmV3IFRyaWFuZ2xlRHJhd2luZyhzdmcpXG4gICAgbGVmdFJvdGF0ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gZHJhd2luZy5hbmltYXRlVHJpYW5nbGVSb3RhdGlvbigtMSlcbiAgICByaWdodFJvdGF0ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gZHJhd2luZy5hbmltYXRlVHJpYW5nbGVSb3RhdGlvbigxKVxufVxuXG5jcmVhdGVIVE1MVHJpYW5nbGUoJ2xlZnQtdHJpYW5nbGUnLCAnbGVmdC1yb3RhdGUtMScsICdsZWZ0LXJvdGF0ZS0yJylcbmNyZWF0ZUhUTUxUcmlhbmdsZSgncmlnaHQtdHJpYW5nbGUnLCAncmlnaHQtcm90YXRlLTEnLCAncmlnaHQtcm90YXRlLTInKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==